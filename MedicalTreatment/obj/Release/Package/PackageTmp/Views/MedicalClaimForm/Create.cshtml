@model MedicalTreatment.Models.MEDICALCLAIMFORM
@*@using MedicalTreatment.Models
    @using MedicalTreatment.Controllers*@
@using MedicalTreatment.Resources

@{

    ViewBag.Title = "Create";
    var message = TempData["AlertMessage"] ?? string.Empty;
    //var Year = 2022;
    var x22 = ViewData["ENTITLEMENTPERCENT"] + "%";
    var sum = TempData["message"];

    var err2 = TempData["AlertMessage2"];

}

@*@if (err2 == "er")
    {
        <script src="~/Content/cdnjs/sweetalert2.all.min.js"></script>
        <script type="text/javascript">
            Swal.fire(
                       '',
                       'لا يسمح ان يكون مجموع المبلغ أكبر من جملة مبلغ العلاج',
                       'error'
                       )


        </script>
    }*@

<div class="title-header">
    <h2 class="d-flex justify-content-center "><i class="mx-2 my-auto fa fa-hand-holding-medical"></i>أستمارة طلب منصرفات علاجية </h2>
</div>



@using (Html.BeginForm("Create", "MedicalClaimForm", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false)

     <fieldset class="card p-4 shadow">
        <legend class="bg-custom shadow  px-3">إضافة</legend>
        <div class="card pt-2">
            <div class="card-body">

                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.Label("السنة العلاجية")
                        @Html.Hidden("err2", new { @class = "form-control", @id = "err2", @Value = err2 })
                        <div>
                            @Html.DropDownList("FORMYEAR", ViewBag.Years as SelectList, "---أختر---", new { @class = "form-control", @id = "Years" })

                        </div>
                    </div>
                </div>
                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.INDIVIDUALID, "أسم الموظف")
                        @**@
                        <div>
                            @Html.DropDownListFor(model => model.INDIVIDUALID, ViewBag.INDIVIDUALID as SelectList, "---أختر---", new { @class = "form-control", @id = "INDIVIDUALID", onchange = "getStructure();GETConsumerCeiling();GETResidualCeiling();" })
                            @Html.ValidationMessageFor(model => model.INDIVIDUALID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.MAINORGANISATIONID, "أسم المجموعة")

                        <div>
                            @Html.DropDownList("MAINORGANISATIONID", ViewBag.MAINORGANISATIONID as SelectList, "---أختر---", new { @class = "form-control", @id = "MAINORGANISATIONID", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.MAINORGANISATIONID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.ORGANISATIONID, "أسم الشركة")

                        <div>
                            @Html.DropDownList("ORGANISATIONID", ViewBag.ORGANISATIONID as SelectList, "---أختر---", new { @class = "form-control", @id = "ORGANISATIONID", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.ORGANISATIONID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.DEPARTMENTID, "أسم الأدارة")

                        <div>
                            @Html.DropDownList("DEPARTMENTID", ViewBag.DEPARTMENTID as SelectList, "---أختر---", new { @class = "form-control", @id = "DEPARTMENTID", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.DEPARTMENTID)
                        </div>
                    </div>
                </div>

                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SECTIONID, "أسم القسم")

                        <div>
                            @Html.DropDownList("SECTIONID", ViewBag.SECTIONID as SelectList, "---أختر---", new { @class = "form-control", @id = "SECTIONID", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.SECTIONID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.PATIENTEMPLOYEE, "المريض الموظف ؟")

                        <div>
                            @Html.DropDownListFor(model => model.PATIENTEMPLOYEE, ViewBag.PATIENTEMPLOYEE as SelectList, "---أختر---", new { @class = "form-control", @id = "PATIENTEMPLOYEE", @onchange = "getPATIENTID(this.id);" })
                            @Html.ValidationMessageFor(model => model.PATIENTEMPLOYEE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.PATIENTID, "أسم المريض")

                        <div>
                            @Html.DropDownListFor(model => model.PATIENTID, ViewBag.PATIENTID as SelectList, "---أختر---", new { @class = "form-control", @id = "PATIENTID" })

                            @Html.ValidationMessageFor(model => model.PATIENTID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.MEDICALSERVICEID, "أسم الخدمة الطبية")

                        <div>
                            @Html.DropDownList("MEDICALSERVICEID", ViewBag.MEDICALSERVICEID as SelectList, "---أختر---", new { @class = "form-control", @id = "MEDICALSERVICEID", @onchange = "checkMedicalService(); getMEDICALDETAILSERVICEID(this.id);" })
                            @Html.Label("الخدمة غير مسموحة لأسرة الموظف", new { @class = "text-danger", @id = "errMsgAr", @hidden = "hidden", @style = "color:red" })
                            @Html.Label("نوع الخدمة لا ينطبق على جنس المريض", new { @id = "errMsgAr2", @hidden = "hidden", @style = "color:red" })


                            @Html.ValidationMessageFor(model => model.MEDICALSERVICEID)
                        </div>
                    </div>

                </div>

                <div class="row my-2">
                    <div class="col-md-3">
                        @*@Html.Hidden("Year", new { @Value = Year, @id = "Year" })*@

                        @Html.Label("مبلغ السقف المستهلك")

                        <div>
                            @Html.TextBox("ConsumerCeiling", "", new { @class = "form-control", @id = "ConsumerCeiling", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.MEDICALDETAILSERVICEID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.Label("مبلغ السقف المتبقي")

                        <div>
                            @Html.TextBox("ResidualCeiling", "", new { @class = "form-control", @id = "ResidualCeiling", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.MEDICALDETAILSERVICEID)
                        </div>
                    </div>
                    @*<div class="col-md-3">
                            @Html.Label("السنة العلاجية")

                            <div>
                                @Html.DropDownList("Years", ViewBag.Years as SelectList, "---أختر---", new { @class = "form-control", @id = "Years" })

                            </div>
                        </div>*@
                    @*<div class="col-md-3">
                            @Html.Label("مجموع مبالغ الإستحقاق")

                            <div>
                                @Html.TextBox("SumTotal", "", new { @class = "form-control", @id = "SumTotal" })


                            </div>
                        </div>*@
                </div>
                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.MEDICALDETAILSERVICEID, "بيان الخدمة الطبية")

                        <div>
                            @Html.DropDownList("MEDICALDETAILSERVICEID", ViewBag.MEDICALDETAILSERVICEID as SelectList, "---أختر---", new { @class = "form-control", @id = "MEDICALDETAILSERVICEID" })
                            @Html.ValidationMessageFor(model => model.MEDICALDETAILSERVICEID)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SICKLEAVESTARTDATE, "تاريخ بداية الأجازة المرضية")

                        <div>
                            @Html.TextBoxFor(model => model.SICKLEAVESTARTDATE, new { @class = "form-control", @type = "Date" })
                            @Html.ValidationMessageFor(model => model.SICKLEAVESTARTDATE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.SICKLEAVEENDDATE, "نهاية بداية الأجازة المرضية")

                        <div>
                            @Html.TextBoxFor(model => model.SICKLEAVEENDDATE, new { @class = "form-control", @type = "Date" })
                            @Html.ValidationMessageFor(model => model.SICKLEAVEENDDATE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.CLAIMDATE, "تاريخ تقديم الطلب")

                        <div>
                            @Html.TextBoxFor(model => model.CLAIMDATE, new { @class = "form-control", @type = "Date" })
                            @Html.ValidationMessageFor(model => model.CLAIMDATE)
                        </div>
                    </div>

                </div>

                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.EMPLOYEESERVICEUNITDATE, "تاريخ توقيع الوحدة الخدمية للموظف")

                        <div>
                            @Html.TextBoxFor(model => model.EMPLOYEESERVICEUNITDATE, new { @class = "form-control", @type = "Date" })
                            @Html.ValidationMessageFor(model => model.EMPLOYEESERVICEUNITDATE)
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.APPROVEDDATE, "تاريخ التصديق")

                        <div>
                            @Html.TextBoxFor(model => model.APPROVEDDATE, new { @class = "form-control", @type = "Date" })
                            @Html.ValidationMessageFor(model => model.APPROVEDDATE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.TOTALCLAIMAMOUNT, "جملة مبلغ العلاج")

                        <div>
                            @Html.TextBoxFor(model => model.TOTALCLAIMAMOUNT, "{0:#,###,###.##}", new { @class = "form-control", id = "TOTALCLAIMAMOUNT", name = "TOTALCLAIMAMOUNT", onchang = "digitGrouping(this.value);" })
                            @Html.ValidationMessageFor(model => model.TOTALCLAIMAMOUNT)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.ENTITLEMENTAMOUNT, "المبلغ المستحق")

                        <div>
                            @Html.TextBoxFor(model => model.ENTITLEMENTAMOUNT, new { @class = "form-control", @id = "ENTITLEMENTAMOUNT" })
                            @Html.ValidationMessageFor(model => model.ENTITLEMENTAMOUNT)
                        </div>
                    </div>
                </div>
                <div class="row my-2">

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.APPROVEDAMOUNT, "المبلغ المصدق")

                        <div>
                            @Html.TextBoxFor(model => model.APPROVEDAMOUNT, new { @class = "form-control", @id = "APPROVEDAMOUNT", @onchange = "CheckTotalApprove();" })
                            @Html.Label("المبلغ المصدق أكبر من المتبقى لجملة سقف الموظف", new { @class = "text-danger", @id = "lblEroMesg", @hidden = "hidden", @style = "color:red" })
                            @*@Html.ValidationMessageFor(model => model.APPROVEDAMOUNT)*@
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.CLAIMNOTE, "تعليق مقدم الطلب")

                        <div>
                            @Html.TextBoxFor(model => model.CLAIMNOTE, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CLAIMNOTE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.EMPLOYEESERVICEUNITNOTE, "تعليق الوحدة الخدمية للموظف")

                        <div>
                            @Html.TextBoxFor(model => model.EMPLOYEESERVICEUNITNOTE, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.EMPLOYEESERVICEUNITNOTE)
                        </div>
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.HUMANRESOURCESNOTE, "تعليق الموارد البشرية")

                        <div>
                            @Html.TextBoxFor(model => model.HUMANRESOURCESNOTE, new { @class = "form-control", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.HUMANRESOURCESNOTE)
                        </div>
                    </div>
                </div>
                <div class="row my-2">
                    <div class="col-md-3">
                        @Html.Label("عدد الفواتير الطبية")
                        @Html.TextBox("Number", "", new { @class = "form-control", @id = "number", onchange = "getpartialDiv(this.value);" })
                    </div>
                    @*<div class="col-md-3">
                            @Html.Label("Claim Id")
                            @Html.LabelFor(model => model.ID, "", new { @class = "form-control", @id = "ID" })
                        </div>*@

                </div>
                <div class="row">
                    <div class="col-lg-12" id="partial">

                    </div>
                </div>


                @*<div  class="col-md-3">
                        @Html.LabelFor(model => model.STATUS)

                        <div>
                            @Html.TextBoxFor(model => model.STATUS)
                            @Html.ValidationMessageFor(model => model.STATUS)
                        </div>
                    </div>
                    <div  class="col-md-3">
                        @Html.LabelFor(model => model.LASTUPDATED)

                        <div>
                            @Html.TextBoxFor(model => model.LASTUPDATED)
                            @Html.ValidationMessageFor(model => model.LASTUPDATED)
                        </div>
                    </div>*@

                <br />
                <p class="mt-3">

                    <input type="submit" value="حفظ" id="CreateButton" class="btn btn-primary" />

                    <a href="/MedicalClaimForm/Index" class="btn btn-outline-info">رجوع الى القائمة</a>
                   </p>


          

            </div>
        </div>

    </fieldset>
}
<script src="~/Content/lib/jquery/dist/jquery.js"></script>
<script src="~/Content/lib/jquery/dist/jquery.min.js"></script>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts2/Common/Common.js"></script>
    <script src="~/Scripts2/chosen_v1.6.2/chosen.jquery.js"></script>
    <script src="~/Scripts2/chosen_v1.6.2/prism.js"></script>
    <link href="~/Scripts2/chosen_v1.6.2/chosen.min.css" rel="stylesheet" />
    <link href="~/Scripts2/chosen_v1.6.2/prism.css" rel="stylesheet" />
    <script src="~/Scripts2/Common/Common.js"></script>
    <script src="~/Content/cdnjs/sweetalert2.all.min.js"></script>
    <script src="~/Content/notifyAlert/mk-notifications.min.js"></script>
    <script src="~/Content/notifyAlert/notifyAlert.js"></script>





    <script type="text/javascript">

        function getMEDICALDETAILSERVICEID(id) {
            debugger
            var _MEDICALSERVICEID = $('#MEDICALSERVICEID').val();

            var input = { MEDICALSERVICEID: _MEDICALSERVICEID };

            GetDropDown(input, "/MedicalClaimForm/getMEDICALDETAILSERVICEID", "MEDICALDETAILSERVICEID", " ", true);

        }

        //(function ($) {
        //    $(document).ready(function () {
        //     debugger
        //     // document.getElementById("model[0].CHEQUEDATE").value = "";
        //     //$("#medICALCLAIMFORMDETAIL").dynamiclist({
        //     //       withEvents: true,

        //     //   });

        //     var length = $("#partial").find("." + "list-item").length;
        //        var i = 0;

        //        while (i < length) {

        //            $("[id = 'model[" + i + "].SERVICEFEESTYPEID']").val("");
        //            $("[id = 'model[" + i + "].AMOUNT']").val("");
        //            $("[id = 'model[" + i + "].UNITID']").val("");
        //            $("[id = 'model[" + i + "].NUMBEROFUNITS']").val("");
        //            $("[id = 'model[" + i + "].TOTALAMOUNT']").val("");
        //            $("[id = 'model[" + i + "].ENTITLEMENTPERCENT']").val("");
        //            $("[id = 'model[" + i + "].ENTITLEMENTAMOUNT']").val("");
        //            i += 1;
        //        }

        //    });
        //})(jQuery);
        function alert2(message, title, buttonText) {

            buttonText = (buttonText == undefined) ? "Ok" : buttonText;
            title = (title == undefined) ? "The page says:" : title;

            var div = $('<div>');
            div.html(message);
            div.attr('title', title);
            div.dialog({
                autoOpen: true,
                modal: true,
                draggable: false,
                resizable: false,
                buttons: [{
                    text: buttonText,
                    click: function () {
                        $(this).dialog("close");
                        changeStatusToPrint();
                        div.remove();
                    }
                }
                    ,
                    {
                        text: "لا",
                        click: function () {
                            $(this).dialog("close");
                            div.remove();
                            window.location = '@Url.Action("Index")';
                        }
                    }
                ]
            });
        }



        function checkMedicalService() {


            var _MEDICALSERVICEID = $('#MEDICALSERVICEID').val();
            var _PATIENTEMPLOYEE = $('#PATIENTEMPLOYEE').val();
            var _INDIVIDUALID = $('#INDIVIDUALID').val();

            var input = { MEDICALSERVICEID: _MEDICALSERVICEID, PATIENTEMPLOYEE: _PATIENTEMPLOYEE, INDIVIDUALID: _INDIVIDUALID };

            debugger
            //var output;
            $.ajax({

                url: '/MedicalClaimForm/CheckMedicalService',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {
                    debugger
                    if (data === 'Exist') {
                        Swal.fire(
    '',
    'الخدمة غير مسموحة لأسرة الموظف',
    'error'
    )
                        //$('#CreateButton').prop("disabled", true);
                        //$('#CreateButton').prop("readonly", true);
                        //$('#errMsgAr').show();
                        //alert2("الخدمة غير مسموحة لأسرة الموظف", "تأكيد", "نعم")
                        $('#MEDICALSERVICEID').val = null
                    }
                    else {
                        $('#CreateButton').prop("disabled", false);
                        $('#CreateButton').prop("readonly", false);
                        //$('#errMsgAr').hide();
                    }
                    if (data === 'Exist2') {
                        Swal.fire(
    '',
    'نوع الخدمة لا ينطبق على جنس المريض',
    'error'
    )
                        $('#CreateButton').prop("disabled", true);
                        $('#CreateButton').prop("readonly", true);
                        //alert2("نوع الخدمة لا ينطبق على جنس المريض", "تأكيد", "نعم")
                        //$('#errMsgAr2').show();
                    }
                    else {
                        //$('#errMsgAr2').hide();
                        $('#CreateButton').prop("disabled", false);
                        $('#CreateButton').prop("readonly", false);
                    }

                },

                error: function () {
                }
            });
        }
        //function GETConsumerCeiling() {
        //    var _INDIVIDUALID = $('#INDIVIDUALID').val()
        //  //  var _Year = $('#Year').val()
        //    var input = { INDIVIDUALID: _INDIVIDUALID };
        //    //
        //    //
        //    debugger
        //    $.ajax({
        //        url: '/MedicalClaimForm/getConsumer',
        //        type: "POST",
        //        data: JSON.stringify(input),
        //        dataType: "json",
        //        contentType: "application/json; charset=utf-8",

        //        success: function (data)
        //        {

        //            if (data != null) {
        //                $("#ResidualCeiling").val(data.ResidualCeiling);
        //                $("#ConsumerCeiling").val(data.ConsumerCeiling);

        //            }
        //            else {
        //                $("#ResidualCeiling").val(0);
        //                $("#ConsumerCeiling").val(0);
        //            }
        //        },
        //        error: function () {
        //        }
        //    });



        //}

        //Check Total Approve Amount From MedicalClaimsForm

        function CheckTotalApprove() {
            debugger

            var _ResidualCeiling = $('#ResidualCeiling').val();
            var _APPROVEDAMOUNT = $('#APPROVEDAMOUNT').val();
            //        if (_APPROVEDAMOUNT > _ResidualCeiling) {
            //            // $('#lblEroMesg').show();//.prop('show', 'show');
            //            //$('#lblEroMesg').prop("disabled", true);
            //            //ShowFeedback('المبلغ المصدق أكبر من المتبقى لجملة سقف الموظف', 'خطأ', 'Error');
            //            Swal.fire(
            //'',
            //'المبلغ المصدق أكبر من المتبقى لجملة سقف الموظف',
            //'error'
            //)
            //            $('#CreateButton').prop("disabled", true);
            //            $('#CreateButton').prop("readonly", true);
            //        }
            //        else {
            //            $('#CreateButton').prop("disabled", false);
            //            $('#CreateButton').prop("readonly", false);
            //        }
            input = {
                ResidualCeiling: _ResidualCeiling,
                APPROVEDAMOUNT: _APPROVEDAMOUNT
            };
            $.ajax({
                url: '/MedicalClaimForm/CheckTotalApprove',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {

                    if (data === true) {
                        Swal.fire(
   '',
   'المبلغ المصدق أكبر من المتبقى لجملة سقف الموظف',
   'error'
   )
                        $('#CreateButton').prop("disabled", true);
                        $('#CreateButton').prop("readonly", true);
                    }
                    else {
                        $('#CreateButton').prop("disabled", false);
                        $('#CreateButton').prop("readonly", false);

                    }
                },
                error: function () {
                }
            });
        }

        function GETConsumerCeiling() {
            debugger

            var _INDIVIDUALID = $('#INDIVIDUALID').val();
            var _Years = $('#Years').val();
            input = {
                INDIVIDUALID: _INDIVIDUALID,
                Years: _Years
            };
            $.ajax({
                url: '/MedicalClaimForm/GetConsumerCeiling',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {

                    if (data != null) {
                        $('#ConsumerCeiling').val(data);
                    }
                    else {
                        $('#ConsumerCeiling').val(0);
                    }
                },
                error: function () {
                }
            });
        }


        function CheckTotalApproveDet(_this) {

            var num = _this.name.replace(/^\D+|\D+$/g, "");

            debugger

            var _TOTALAMOUNTD = $('#TOTALAMOUNTD' + num + '').val();
            var _APPROVEDAMOUNTDD = $('#APPROVEDAMOUNTDD' + num + '').val();

            input = {
                TOTALAMOUNTD: _TOTALAMOUNTD,
                APPROVEDAMOUNTDD: _APPROVEDAMOUNTDD
            };
            $.ajax({
                url: '/MedicalClaimForm/CheckApproveTotalDET',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {

                    if (data === true) {
                        Swal.fire(
   '',
   'لا يسمح ان يكون المبلغ المصدق أعلى من مجموع المبلغ',
   'error'
   )
                        $('#CreateButton').prop("disabled", true);
                        $('#CreateButton').prop("readonly", true);
                    }
                    else {
                        $('#CreateButton').prop("disabled", false);
                        $('#CreateButton').prop("readonly", false);

                    }
                },
                error: function () {
                }
            });
        }

        function GETResidualCeiling() {
            debugger

            var _INDIVIDUALID = $('#INDIVIDUALID').val();
            var _Years = $('#Years').val();

            input = {
                INDIVIDUALID: _INDIVIDUALID,
                Years: _Years
            };

            $.ajax({
                url: '/MedicalClaimForm/GetResidualCeiling',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {

                    if (data != null) {
                        $('#ResidualCeiling').val(data);
                    }
                    else {
                        $('#ResidualCeiling').val(0);
                    }
                },
                error: function () {
                }
            });
        }

        function getpartialDiv() {
            debugger
            var childnumber = $('#number').val();
            input = { 'Number': childnumber };
            $.ajax({
                url: '@Url.Action("getpartialDiv", "MedicalClaimForm")',
                type: 'post',
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    document.getElementById("partial").innerHTML = data;
                },
                error: function (err) {
                    console.log("ajax failure (links permisoins): " + err.val());
                }
            });
        }


        function getStructure() {
            var _INDIVIDUALID = $('#INDIVIDUALID').val()
            var input = { INDIVIDUALID: _INDIVIDUALID };
            debugger

            $.ajax({

                url: '/MedicalClaimForm/getStruc',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {

                    $("#MAINORGANISATIONID").val(data.MAINORGANISATIONID);
                    $("#ORGANISATIONID").val(data.ORGANISATIONID);
                    $("#DEPARTMENTID").val(data.DEPARTMENTID);
                    $("#SECTIONID").val(data.SECTIONID);


                },
                error: function () {
                }
            });
        }


        function getPATIENTID(id) {
            debugger
            var PATIENTEMPLOYEE = $('#PATIENTEMPLOYEE').val();
            if (PATIENTEMPLOYEE == "No") {

                var _INDIVIDUALID = $('#INDIVIDUALID').val()
                var input = { INDIVIDUALID: _INDIVIDUALID };
                $('#PATIENTID').prop("readonly", false);
                GetDropDown(input, "/MedicalClaimForm/getSponsors", "PATIENTID", " ", true);

            }
            else if (PATIENTEMPLOYEE == "Yes") {

                var _INDIVIDUALID = $('#INDIVIDUALID').val()
                var input = { INDIVIDUALID: _INDIVIDUALID };
                // $('#PATIENTID').prop("readonly", true);
                GetDropDown(input, "/MedicalClaimForm/getEmpName", "PATIENTID", " ", true);

            }
        }


        //function getTOTAL() {
        //    var Amount = $('AMOUNT').val();
        //    var NoUnit = $('NUMBEROFUNITS').val();
        //    var TotalAmount = Amount * NoUnit;
        //    $('TOTALAMOUNT') = TotalAmount;
        //}

        //$(document).ready(function () {


        //    });
        function getTOTAL(_this) {
            // alert(_this + "");
            debugger
            var num = _this.name.replace(/^\D+|\D+$/g, "");
            //alert(num + " ");

            var _AMOUNT = $('#AMOUNT' + num + '').val();
            var _NUMBEROFUNITS = $('#NUMBEROFUNITS' + num + '').val();

            var input = { AMOUNT: _AMOUNT, NUMBEROFUNITS: _NUMBEROFUNITS };

            $.ajax({

                url: '/MedicalClaimForm/GetTOTAL',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {
                    if (data != null) {
                        $('#TOTALAMOUNTD' + num + '').val(data);
                      
                    }
                    else {
                        $('#TOTALAMOUNTD').val("");
                     
                    }
                },


                error: function () {
                }
            });
        }

        function GetTotalPer(_this) {
            // alert(_this + "");
            debugger
            var num = _this.name.replace(/^\D+|\D+$/g, "");
            //alert(num + " ");

            var _AMOUNT = $('#AMOUNT' + num + '').val();
            var _NUMBEROFUNITS = $('#NUMBEROFUNITS' + num + '').val();

            var input = { AMOUNT: _AMOUNT, NUMBEROFUNITS: _NUMBEROFUNITS };

            $.ajax({

                url: '/MedicalClaimForm/GetTotalPer',
                type: "POST",
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",

                success: function (data) {
                    if (data != null) {
                        $('#ENTITLEMENTAMOUNT' + num + '').val(data);
                        // APPROVEDAMOUNT
                        $('#APPROVEDAMOUNTDD' + num + '').val(data);
                        // $('#TOTALAMOUNT').val(data);
                    }
                    else {
                        $('#ENTITLEMENTAMOUNT').val("");
                        $('#APPROVEDAMOUNTDD').val("");
                    }
                },

                error: function () {
                }
            });
        }
        function GetDropDown(input, url, targetId, defaultValue, withdefaultValue) {
            var target = $('select[name="' + targetId + '"]');
            //var target = $('#' + targetId);
            $.ajax({
                url: url,
                type: "POST",
                traditional: true,
                data: JSON.stringify(input),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    target.empty();
                    if (withdefaultValue)
                        target.append("<option value='" + 0 + "'>" + defaultValue + " </option>");
                    $(data).each(function () {
                        $(document.createElement('option'))
                .attr('value', this.Value)
                .text(this.Text)
                .appendTo(target);
                    });

                    return;

                },
                error: function () {
                    return;
                }
            });


        }


        //added by aa
        /*this function i use to  check if the sum of the amounts of the details is equal to the amount entered in the transaction
        and if not i use this function to disable/and enable the save button + give a warning.*/

        ////
        function getXsum(_this) {
            //var num = _this.name.replace(/^\D+|\D+$/g, "");
            debugger
            var count = new Number;
            var checkNOF = document.getElementById('number').value;
            var originalamount = document.getElementById('TOTALCLAIMAMOUNT').value;
            // var wishbutton2 = document.getElementById('TOTALAMOUNTD'+i+'');


            var finalsum = new Number;
            var getamount = new Number;
            var temp = removeCommas(originalamount);
            var test = $("[id= 'TOTALAMOUNTD[0]']").val();
            //var test = $("[id = 'details[0].AMOUNT']").val();

            if (checkNOF != null) {
                count = checkNOF;
            } else {
                count = 0;
            }
            for (var i = 0; i < checkNOF; i++) {

                // var testt = removeCommas($("[id = 'details[" + i + "].AMOUNT']").val());
                var testt = removeCommas($("[id = 'TOTALAMOUNTD[" + i + "]']").val());
                //var _AMOUNT = $('#AMOUNT' + num + '').val();
                var abstractvalue = parseFloat(testt);
                getamount = parseFloat(abstractvalue + getamount);

            }


            if (getamount > temp) {


                Swal.fire(
  '',
  'لا يسمح ان يكون مجموع المبلغ أكبر من جملة مبلغ العلاج',
  'error'
  )
                // ShowFeedback('تحذير', 'يجب أن يتساوى مجموع القيم بالمبلغ', 'Warning');
                $("#AMOUNT").val();
                CreateButton.disabled = true;

            } else {
                HideFeedback();
                CreateButton.disabled = false;

            }
        }
        ////

        //added by aa
        /*the next three functions for adding a comma after three digits.*/


        ////

        function removeCommas(str) {
            while (str.search(",") >= 0) {
                str = (str + "").replace(',', '');
            }
            return str;
        }
        function groupingExecute(vlue) {
            var auth = vlue.toString("{0:##,##.##}");
            var offset = vlue.length % 3;
            if (offset == 0)
                auth = vlue.substring(0, offset) + vlue.substring(offset).replace(/([0-9]{3})(?=[0-9]+)/g, "$1,");
            else
                auth = vlue.substring(0, offset) + vlue.substring(offset).replace(/([0-9]{3})/g, ",$1");

            return auth;
        }
        ////

        function addCommas(x) {
            var parts = x.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(",");
        }


        function digitGrouping(id) {
            var final = "";
            var temp = "";
            var vlue = $('#' + id).val();
            var res = vlue.split(".");
            if (res.length === 1) {
                temp = removeCommas(vlue);
                final = groupingExecute(temp);
            }
            else {
                temp = removeCommas(res[0]);
                final = groupingExecute(temp);
                temp = removeCommas(res[1]);
                final = final + "." + groupingExecute(temp);
            }
            //auth = auth.replace(/,/g, "");
            $('#' + id).val(final);
        }
        //////////////////////


        function ShowFeedback(message, type, messageStyle) {
            var massage = "<div class='alert alert-" + messageStyle.toString().toLowerCase() + "'> <a href='#' class='close' data-dismiss='alert'>&times;</a> <strong>" + type + "! </strong> " + message + ". </div>";
            $('#FeedbackMassage').html(massage);
            notifyAlert(message, messageStyle, type);

        }



        $('#CreateButton').click(function GetSum() {
            var sumerr = $('#err2').val();
            debugger
            if (sumerr == "er") {
                Swal.fire(
                  '',
                  'لا يسمح ان يكون مجموع المبلغ أكبر من جملة مبلغ العلاج',
                  'error'
                  )

                CreateButton.disabled = true;
            }
        }

        );

        var message = '@message';
        if (message)
            alert(message);
    </script>

}